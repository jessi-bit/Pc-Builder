{
	"info": {
		"_postman_id": "8b94cbf7-5d8e-40cd-96f8-4eee19471f16",
		"name": "Progetto H21",
		"description": "This collection contains all the APIs tests written in JavaScript, also we have a test body that you can use to try them on your local DB.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CompatibilityConstraintsAPI",
			"item": [
				{
					"name": "Get all compatibility constraints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/compatibilityConstraints",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraints"
							]
						},
						"description": "This API allows you to get all the compatibility constraints memorized into the DB."
					},
					"response": [
						{
							"name": "Get all compatibility constraints",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/compatibilityConstraints",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraints"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 12:56:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"componentFamily1\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 2,\n        \"componentFamily1\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 3,\n        \"componentFamily1\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 4,\n        \"componentFamily1\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 5,\n        \"componentFamily1\": {\n            \"id\": 3,\n            \"name\": \"CPU Intel socket FCLGA2066\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 10,\n            \"name\": \"Motherboard C422\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 6,\n        \"componentFamily1\": {\n            \"id\": 3,\n            \"name\": \"CPU Intel socket FCLGA2066\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 7,\n        \"componentFamily1\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 8,\n        \"componentFamily1\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 9,\n        \"componentFamily1\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 10,\n        \"componentFamily1\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 11,\n        \"componentFamily1\": {\n            \"id\": 10,\n            \"name\": \"Motherboard C422\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 12,\n        \"componentFamily1\": {\n            \"id\": 10,\n            \"name\": \"Motherboard C422\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 20,\n            \"name\": \"RAM 256GB 8 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 13,\n        \"componentFamily1\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 14,\n        \"componentFamily1\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 20,\n            \"name\": \"RAM 256GB 8 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 15,\n        \"componentFamily1\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 12,\n            \"name\": \"Motherboard B450\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 16,\n        \"componentFamily1\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 13,\n            \"name\": \"Motherboard B550\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 17,\n        \"componentFamily1\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 14,\n            \"name\": \"Motherboard X470\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 18,\n        \"componentFamily1\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 15,\n            \"name\": \"Motherboard X570\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 19,\n        \"componentFamily1\": {\n            \"id\": 5,\n            \"name\": \"CPU AMD socket sTRX4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 16,\n            \"name\": \"Motherboard TRX40\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 20,\n        \"componentFamily1\": {\n            \"id\": 12,\n            \"name\": \"Motherboard B450\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 21,\n        \"componentFamily1\": {\n            \"id\": 13,\n            \"name\": \"Motherboard B550\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 22,\n        \"componentFamily1\": {\n            \"id\": 14,\n            \"name\": \"Motherboard X470\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 23,\n        \"componentFamily1\": {\n            \"id\": 15,\n            \"name\": \"Motherboard X570\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 24,\n        \"componentFamily1\": {\n            \"id\": 16,\n            \"name\": \"Motherboard TRX40\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 25,\n        \"componentFamily1\": {\n            \"id\": 16,\n            \"name\": \"Motherboard TRX40\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        },\n        \"componentFamily2\": {\n            \"id\": 20,\n            \"name\": \"RAM 256GB 8 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get components avaible that are compatible with a specific product id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/compatibilityConstraints/getByComponentId/6",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraints",
								"getByComponentId",
								"6"
							]
						},
						"description": "This API allows you to get all the components that are compatible with a specific product id."
					},
					"response": [
						{
							"name": "Get components avaible that are compatible with a specific product id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/compatibilityConstraints/getByComponentId/6",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraints",
										"getByComponentId",
										"6"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:13:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 24,\n        \"name\": \"ASUS ROG STRIX B460-H GAMING\",\n        \"price\": 148.24,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 25,\n        \"name\": \"ASUS TUF GAMING H470-PRO (WI-FI)\",\n        \"price\": 172,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 26,\n        \"name\": \"ASUS PRIME H470-PLUS\",\n        \"price\": 137,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 27,\n        \"name\": \"ASUS ROG STRIX B560-E GAMING WIFI\",\n        \"price\": 209,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 28,\n        \"name\": \"ASUS TUF GAMING B560-PLUS WIFI\",\n        \"price\": 154,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 29,\n        \"name\": \"ASUS TUF GAMING B560M-PLUS\",\n        \"price\": 161.96,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 30,\n        \"name\": \"ASUS PRIME Z490-A\",\n        \"price\": 239,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 31,\n        \"name\": \"ASUS ProArt Z490-CREATOR 10G\",\n        \"price\": 351,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 32,\n        \"name\": \"ASUS ROG STRIX Z490-H GAMING\",\n        \"price\": 236,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 33,\n        \"name\": \"ASUS PRIME Z590-P WIFI\",\n        \"price\": 190.13,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 34,\n        \"name\": \"ASUS ROG STRIX Z590-A GAMING WIFI\",\n        \"price\": 309.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 35,\n        \"name\": \"ASUS ROG STRIX Z590-F GAMING WIFI\",\n        \"price\": 329.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get components avaible that are compatible with a specific product id failure due to a not existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/compatibilityConstraints/getByComponentId/150",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraints",
								"getByComponentId",
								"150"
							]
						},
						"description": "In this case the API will fail because the id of the product does not exist."
					},
					"response": [
						{
							"name": "Get components avaible that are compatible with a specific product id failure due to a not existing id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/compatibilityConstraints/getByComponentId/150",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraints",
										"getByComponentId",
										"150"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:28:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Get a compatibility constraints according to its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.componentFamily1).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.undefined;",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"    pm.expect(jsonData.componentFamily2).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.undefined;",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/compatibilityConstraints/5",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraints",
								"5"
							]
						},
						"description": "This API allows you to get a specific compatibility constraint according to its id."
					},
					"response": [
						{
							"name": "Get a compatibility constraints according to its id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/compatibilityConstraints/5",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraints",
										"5"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:13:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"componentFamily1\": {\n        \"id\": 3,\n        \"name\": \"CPU Intel socket FCLGA2066\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    \"componentFamily2\": {\n        \"id\": 10,\n        \"name\": \"Motherboard C422\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new compatibility constraint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.componentFamily1).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.undefined;",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"    pm.expect(jsonData.componentFamily2).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.undefined;",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 15\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/compatibilityConstraint",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraint"
							]
						},
						"description": "This API allows you to add a new compatibility constraint to the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Add a new compatibility constraint",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 15\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/compatibilityConstraint",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraint"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:13:51 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 31,\n    \"componentFamily1\": {\n        \"id\": 2,\n        \"name\": \"CPU Intel socket FCLGA1200\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    \"componentFamily2\": {\n        \"id\": 15,\n        \"name\": \"Motherboard X570\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new compatibility constraint failure due to a not existing family id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/compatibilityConstraint",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraint"
							]
						},
						"description": "In this case the API will fail because the family id in the request body does not exist in the DB."
					},
					"response": [
						{
							"name": "Add a new compatibility constraint failure due to a not existing family id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 50\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/compatibilityConstraint",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraint"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:14:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Modify a compatibility constraint operation not allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 405\", () => {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 16\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/compatibilityConstraint/43",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraint",
								"43"
							]
						},
						"description": "This API allows you to modify a compatibility constraint that is already memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Modify a compatibility constraint",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"componentFamilyId1\": 2,\n    \"componentFamilyId2\": 16\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/compatibilityConstraint/31",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraint",
										"31"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:14:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 31,\n    \"componentFamily1\": {\n        \"id\": 2,\n        \"name\": \"CPU Intel socket FCLGA1200\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    \"componentFamily2\": {\n        \"id\": 16,\n        \"name\": \"Motherboard TRX40\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Delete a compatibility constraint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/compatibilityConstraint/43",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraint",
								"43"
							]
						},
						"description": "This API allows you to delete a compatibility constraint memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete a compatibility constraint",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/compatibilityConstraint/31",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraint",
										"31"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:14:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Delete a compatibility constraint failure due to a not existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/compatibilityConstraint/53",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compatibilityConstraint",
								"53"
							]
						},
						"description": "In this case the API will fail because the compatibility constraint id does not exist."
					},
					"response": [
						{
							"name": "Delete a compatibility constraint failure due to a not existing id",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/compatibilityConstraint/53",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"compatibilityConstraint",
										"53"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:14:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "false"
						}
					]
				}
			],
			"description": "This folder contains alla the APIs related with compatibility constraints."
		},
		{
			"name": "ComponentAPI",
			"item": [
				{
					"name": "Get all components available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/components",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"components"
							]
						},
						"description": "This API allows you yo get all the components memorized into the DB."
					},
					"response": [
						{
							"name": "Get all components available",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/components",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"components"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:15:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Sharkoon Pure Steel\",\n        \"price\": 52.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 2,\n        \"name\": \"TALIUS Cronos Vetro Temperato\",\n        \"price\": 186.38,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Empire Gaming - Case PC Gaming WarFare Nero LED Blu\",\n        \"price\": 59.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 4,\n        \"name\": \"be quiet! Pure Base 600 Window vane portacomputer Midi-Tower\",\n        \"price\": 99.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Ctesports CT0001 Case da Gaming\",\n        \"price\": 63.66,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Intel Core i5-11600 Processor (12M Cache, up to 4.80 GHz)\",\n        \"price\": 213,\n        \"power\": 65,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Intel Core i5-11600K Processor (12M Cache, up to 4.90 GHz)\",\n        \"price\": 262,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Intel Core i5-11600KF Processor (12M Cache, up to 4.90 GHz)\",\n        \"price\": 237,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 9,\n        \"name\": \"Intel Core i7-11700 Processor (16M Cache, up to 4.90 GHz)\",\n        \"price\": 323,\n        \"power\": 65,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Intel Core i7-11700K Processor (16M Cache, up to 5.00 GHz)\",\n        \"price\": 399,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Intel Core i7-11700KF Processor (16M Cache, up to 5.00 GHz)\",\n        \"price\": 374,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Intel Core i9-11900 Processor (16M Cache, up to 5.20 GHz)\",\n        \"price\": 439,\n        \"power\": 65,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 13,\n        \"name\": \"Intel Core i9-11900K Processor (16M Cache, up to 5.30 GHz)\",\n        \"price\": 539,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Intel Core i9-11900KF Processor (16M Cache, up to 5.30 GHz)\",\n        \"price\": 513,\n        \"power\": 125,\n        \"componentFamily\": {\n            \"id\": 2,\n            \"name\": \"CPU Intel socket FCLGA1200\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 15,\n        \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n        \"price\": 797,\n        \"power\": 165,\n        \"componentFamily\": {\n            \"id\": 3,\n            \"name\": \"CPU Intel socket FCLGA2066\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Intel Core i9-10980XE Extreme Edition (24,75 MB di cache, 3,0 GHz)\",\n        \"price\": 1000,\n        \"power\": 165,\n        \"componentFamily\": {\n            \"id\": 3,\n            \"name\": \"CPU Intel socket FCLGA2066\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 17,\n        \"name\": \"AMD Ryzen 5 5600X\",\n        \"price\": 312,\n        \"power\": 65,\n        \"componentFamily\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 18,\n        \"name\": \"AMD Ryzen 7 5800X Desktop \",\n        \"price\": 431,\n        \"power\": 105,\n        \"componentFamily\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 19,\n        \"name\": \"AMD Ryzen 9 5900X Desktop \",\n        \"price\": 593,\n        \"power\": 105,\n        \"componentFamily\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 20,\n        \"name\": \"AMD Ryzen 9 5950X Desktop Processors\",\n        \"price\": 837,\n        \"power\": 105,\n        \"componentFamily\": {\n            \"id\": 4,\n            \"name\": \"CPU AMD socket AM4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 21,\n        \"name\": \"AMD Ryzen Threadripper 2970WX\",\n        \"price\": 1453,\n        \"power\": 250,\n        \"componentFamily\": {\n            \"id\": 5,\n            \"name\": \"CPU AMD socket sTRX4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 22,\n        \"name\": \"AMD Ryzen Threadripper 3970X\",\n        \"price\": 2449,\n        \"power\": 280,\n        \"componentFamily\": {\n            \"id\": 5,\n            \"name\": \"CPU AMD socket sTRX4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 23,\n        \"name\": \"AMD Ryzen Threadripper 3990X\",\n        \"price\": 4698,\n        \"power\": 280,\n        \"componentFamily\": {\n            \"id\": 5,\n            \"name\": \"CPU AMD socket sTRX4\",\n            \"type\": {\n                \"id\": 2,\n                \"name\": \"CPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 24,\n        \"name\": \"ASUS ROG STRIX B460-H GAMING\",\n        \"price\": 148.24,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 25,\n        \"name\": \"ASUS TUF GAMING H470-PRO (WI-FI)\",\n        \"price\": 172,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 26,\n        \"name\": \"ASUS PRIME H470-PLUS\",\n        \"price\": 137,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 6,\n            \"name\": \"Motherboard B460\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 27,\n        \"name\": \"ASUS ROG STRIX B560-E GAMING WIFI\",\n        \"price\": 209,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 28,\n        \"name\": \"ASUS TUF GAMING B560-PLUS WIFI\",\n        \"price\": 154,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 29,\n        \"name\": \"ASUS TUF GAMING B560M-PLUS\",\n        \"price\": 161.96,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 7,\n            \"name\": \"Motherboard B560\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 30,\n        \"name\": \"ASUS PRIME Z490-A\",\n        \"price\": 239,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 31,\n        \"name\": \"ASUS ProArt Z490-CREATOR 10G\",\n        \"price\": 351,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 32,\n        \"name\": \"ASUS ROG STRIX Z490-H GAMING\",\n        \"price\": 236,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 8,\n            \"name\": \"Motherboard Z490\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 33,\n        \"name\": \"ASUS PRIME Z590-P WIFI\",\n        \"price\": 190.13,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 34,\n        \"name\": \"ASUS ROG STRIX Z590-A GAMING WIFI\",\n        \"price\": 309.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 35,\n        \"name\": \"ASUS ROG STRIX Z590-F GAMING WIFI\",\n        \"price\": 329.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 9,\n            \"name\": \"Motherboard Z590\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 36,\n        \"name\": \"ASUS WS C422 PRO/SE \",\n        \"price\": 493.42,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 10,\n            \"name\": \"Motherboard C422\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 37,\n        \"name\": \"ASUS ROG Strix X299-E Gaming II\",\n        \"price\": 409.43,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 38,\n        \"name\": \"ASUS Prime X299-A II\",\n        \"price\": 330.44,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 39,\n        \"name\": \"ASUS ROG STRIX X299-E GAMING\",\n        \"price\": 468.82,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 11,\n            \"name\": \"Motherboard X299\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 40,\n        \"name\": \"ASUS TUF GAMING B450M-PLUS II\",\n        \"price\": 103.16,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 12,\n            \"name\": \"Motherboard B450\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 41,\n        \"name\": \"ASUS TUF B450M-PRO GAMING\",\n        \"price\": 98.82,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 12,\n            \"name\": \"Motherboard B450\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 42,\n        \"name\": \"ASUS TUF GAMING B450M-PRO S\",\n        \"price\": 139.13,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 12,\n            \"name\": \"Motherboard B450\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 43,\n        \"name\": \"ASUS ROG STRIX B550-XE GAMING WIFI\",\n        \"price\": 286.94,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 13,\n            \"name\": \"Motherboard B550\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 44,\n        \"name\": \"ASUS PRIME B550M-K\",\n        \"price\": 117.98,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 13,\n            \"name\": \"Motherboard B550\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 45,\n        \"name\": \"ASUS ProArt B550-CREATOR\",\n        \"price\": 218.95,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 13,\n            \"name\": \"Motherboard B550\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 46,\n        \"name\": \"ASUS ROG CROSSHAIR VII HERO (WI-FI)\",\n        \"price\": 480.98,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 14,\n            \"name\": \"Motherboard X470\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 47,\n        \"name\": \"ASUS ROG Crosshair VIII Dark Hero\",\n        \"price\": 453.43,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 15,\n            \"name\": \"Motherboard X570\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 48,\n        \"name\": \"ASUS ROG Crosshair VIII Hero (WI-FI)\",\n        \"price\": 435,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 15,\n            \"name\": \"Motherboard X570\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 49,\n        \"name\": \"ASUS ROG Strix X570-F Gaming\",\n        \"price\": 244.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 15,\n            \"name\": \"Motherboard X570\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 50,\n        \"name\": \"ASUS ROG Strix TRX40-E Gaming\",\n        \"price\": 545.23,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 16,\n            \"name\": \"Motherboard TRX40\",\n            \"type\": {\n                \"id\": 3,\n                \"name\": \"MOTHERBOARD\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 51,\n        \"name\": \"Nvidia GeForce RTX 3060\",\n        \"price\": 339,\n        \"power\": 170,\n        \"componentFamily\": {\n            \"id\": 17,\n            \"name\": \"GPU Nvidia\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 52,\n        \"name\": \"Nvidia GeForce RTX 3060 Ti\",\n        \"price\": 429,\n        \"power\": 200,\n        \"componentFamily\": {\n            \"id\": 17,\n            \"name\": \"GPU Nvidia\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Nvidia GeForce RTX 3070\",\n        \"price\": 519,\n        \"power\": 220,\n        \"componentFamily\": {\n            \"id\": 17,\n            \"name\": \"GPU Nvidia\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 54,\n        \"name\": \"Nvidia GeForce RTX 3080\",\n        \"price\": 719,\n        \"power\": 320,\n        \"componentFamily\": {\n            \"id\": 17,\n            \"name\": \"GPU Nvidia\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 55,\n        \"name\": \"Nvidia GeForce RTX 3090\",\n        \"price\": 1549,\n        \"power\": 350,\n        \"componentFamily\": {\n            \"id\": 17,\n            \"name\": \"GPU Nvidia\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 56,\n        \"name\": \"AMD Radeon RX 5700 XT\",\n        \"price\": 616,\n        \"power\": 235,\n        \"componentFamily\": {\n            \"id\": 18,\n            \"name\": \"GPU RADEON\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 57,\n        \"name\": \"AMD Radeon RX 6700 XT\",\n        \"price\": 482.46,\n        \"power\": 230,\n        \"componentFamily\": {\n            \"id\": 18,\n            \"name\": \"GPU RADEON\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 58,\n        \"name\": \"AMD Radeon RX 6800 Graphics\",\n        \"price\": 583.17,\n        \"power\": 250,\n        \"componentFamily\": {\n            \"id\": 18,\n            \"name\": \"GPU RADEON\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 59,\n        \"name\": \"AMD Radeon RX 6800 XT Graphics\",\n        \"price\": 653.67,\n        \"power\": 300,\n        \"componentFamily\": {\n            \"id\": 18,\n            \"name\": \"GPU RADEON\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 60,\n        \"name\": \"AMD Radeon RX 6900 XT Graphics\",\n        \"price\": 1006.2,\n        \"power\": 300,\n        \"componentFamily\": {\n            \"id\": 18,\n            \"name\": \"GPU RADEON\",\n            \"type\": {\n                \"id\": 4,\n                \"name\": \"GPU\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 61,\n        \"name\": \"Corsair VENGEANCE 2400 MHz 8 GB (2 da 4)\",\n        \"price\": 79.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 62,\n        \"name\": \"Corsair VENGEANCE 2400 MHz 16 GB (2 da 8)\",\n        \"price\": 129.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 63,\n        \"name\": \"Corsair VENGEANCE 2400 MHz 32 GB (4 da 8)\",\n        \"price\": 259.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 64,\n        \"name\": \"Corsair VENGEANCE 2400 MHz 64 GB (4 da 16)\",\n        \"price\": 489.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 65,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 16 GB (2 da 8)\",\n        \"price\": 114.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 66,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 32 GB (2 da 16)\",\n        \"price\": 279.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 67,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 32 GB (4 da 8)\",\n        \"price\": 224.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 68,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 64 GB (2 da 32)\",\n        \"price\": 399.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 69,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 64 GB (4 da 16)\",\n        \"price\": 549.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 70,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 128 GB (4 da 32)\",\n        \"price\": 939.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 71,\n        \"name\": \"Corsair VENGEANCE 3600 MHz 32 GB (4 da 8)\",\n        \"price\": 339.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 72,\n        \"name\": \"Corsair VENGEANCE 3600 MHz 32 GB (2 da 16)\",\n        \"price\": 234.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 73,\n        \"name\": \"Corsair VENGEANCE 3600 MHz 128 GB (4 da 32)\",\n        \"price\": 919.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 19,\n            \"name\": \"RAM 128GB 4 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 74,\n        \"name\": \"Corsair VENGEANCE 3600 MHz 128 GB (8 da 16)\",\n        \"price\": 1494.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 20,\n            \"name\": \"RAM 256GB 8 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 75,\n        \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n        \"price\": 1664.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 20,\n            \"name\": \"RAM 256GB 8 slot\",\n            \"type\": {\n                \"id\": 5,\n                \"name\": \"RAM\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 76,\n        \"name\": \"Intel 670p M.2 512 GB\",\n        \"price\": 92.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 77,\n        \"name\": \"Intel 670p M.2 1 TB\",\n        \"price\": 163.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 78,\n        \"name\": \"Intel 670p M.2 2 TB\",\n        \"price\": 246.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 79,\n        \"name\": \"SAMSUNG 980 PRO M.2 500 GB\",\n        \"price\": 132.4,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 80,\n        \"name\": \"SAMSUNG 980 PRO M.2 1 TB\",\n        \"price\": 207.8,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 81,\n        \"name\": \"Intel 670p M.2 2 TB\",\n        \"price\": 453.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 21,\n            \"name\": \"Memory PCIe\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 82,\n        \"name\": \"Samsung 870 EVO da 250 GB\",\n        \"price\": 39.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 83,\n        \"name\": \"Samsung 870 EVO da 500 GB\",\n        \"price\": 63.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 84,\n        \"name\": \"Samsung 870 EVO da 1 TB\",\n        \"price\": 114.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 85,\n        \"name\": \"Samsung 870 EVO da 2 TB\",\n        \"price\": 219.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 86,\n        \"name\": \"Samsung 870 EVO da 4 TB\",\n        \"price\": 441.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 87,\n        \"name\": \"Samsung 870 EVO da 8 TB\",\n        \"price\": 755.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 22,\n            \"name\": \"Memory SOLID STATE\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 88,\n        \"name\": \"SEAGATE BARRACUDA HDD 1 TB\",\n        \"price\": 34.3,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 89,\n        \"name\": \"SEAGATE BARRACUDA HDD 2 TB\",\n        \"price\": 49.98,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 90,\n        \"name\": \"SEAGATE IRONWOLF PRO 4 TB\",\n        \"price\": 136.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 91,\n        \"name\": \"SEAGATE IRONWOLF PRO 6 TB\",\n        \"price\": 220.68,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 92,\n        \"name\": \"SEAGATE IRONWOLF PRO 8 TB\",\n        \"price\": 326.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 93,\n        \"name\": \"SEAGATE IRONWOLF PRO 12 TB\",\n        \"price\": 452.25,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 23,\n            \"name\": \"Memory HARD DISK\",\n            \"type\": {\n                \"id\": 6,\n                \"name\": \"MEMORY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 94,\n        \"name\": \"Dissipatore CPU PCS FrostFlow 100 RGB V3\",\n        \"price\": 30,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 95,\n        \"name\": \"Dissipatore PCS FrostFlow 120 Series RGB\",\n        \"price\": 44,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 96,\n        \"name\": \"Dissipatore PCS FrostFlow 240 Series RGB\",\n        \"price\": 48,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 97,\n        \"name\": \"Dissipatore PSU Corsair H60\",\n        \"price\": 68,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 98,\n        \"name\": \"Corsair H100x con ventole silenziose\",\n        \"price\": 113,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 99,\n        \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n        \"price\": 156,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 24,\n            \"name\": \"CPU cooler\",\n            \"type\": {\n                \"id\": 7,\n                \"name\": \"CPU COOLER\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 100,\n        \"name\": \"CORSAIR 350 W VS SERIES\",\n        \"price\": 39.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 101,\n        \"name\": \"CORSAIR 450 W CV SERIES\",\n        \"price\": 44.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 102,\n        \"name\": \"CORSAIR 550 W CV SERIES\",\n        \"price\": 52.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 103,\n        \"name\": \"CORSAIR 650 W CV SERIES\",\n        \"price\": 64.9,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 104,\n        \"name\": \"CORSAIR 750 W CXM SERIES\",\n        \"price\": 101.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 105,\n        \"name\": \"CORSAIR 850 W TXm SERIES\",\n        \"price\": 129,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 106,\n        \"name\": \"CORSAIR 1000 W RMx SERIES\",\n        \"price\": 229.73,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 25,\n            \"name\": \"Power supply\",\n            \"type\": {\n                \"id\": 8,\n                \"name\": \"POWER SUPPLY\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 107,\n        \"name\": \"Tastiera USB Logitech K120\",\n        \"price\": 16,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 108,\n        \"name\": \"Combo wireless Logitech MK540\",\n        \"price\": 64,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 109,\n        \"name\": \"CTastiera ASUS TUF Gaming K3\",\n        \"price\": 116,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 110,\n        \"name\": \"Mouse per gaming ASUS Cerberus\",\n        \"price\": 44,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 111,\n        \"name\": \"Mouse per gaming MM711\",\n        \"price\": 53,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 112,\n        \"name\": \"Mouse ASUS ROG Pugio II\",\n        \"price\": 113,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 113,\n        \"name\": \"Monitor AOC E2270SWHN 21,5\\\"\",\n        \"price\": 101,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 114,\n        \"name\": \"AOC E2470SWH 23,6\\\"\",\n        \"price\": 148,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 115,\n        \"name\": \"Widescreen IIYAMA X2783HSU-B3 da 27\\\"\",\n        \"price\": 167,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 116,\n        \"name\": \"AOC AGON AG271QX 27\\\"\",\n        \"price\": 470,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 117,\n        \"name\": \"Asus ROG Swift PG329Q 32\\\"\",\n        \"price\": 824,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 26,\n            \"name\": \"Accessories\",\n            \"type\": {\n                \"id\": 9,\n                \"name\": \"ACCESSORIES\",\n                \"sortOrder\": null\n            }\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get components according to their type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/component/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"1"
							]
						},
						"description": "This API allows you to get all the components according to their type."
					},
					"response": [
						{
							"name": "Get components according to their type",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/component/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:15:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Sharkoon Pure Steel\",\n        \"price\": 52.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 2,\n        \"name\": \"TALIUS Cronos Vetro Temperato\",\n        \"price\": 186.38,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Empire Gaming - Case PC Gaming WarFare Nero LED Blu\",\n        \"price\": 59.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 4,\n        \"name\": \"be quiet! Pure Base 600 Window vane portacomputer Midi-Tower\",\n        \"price\": 99.99,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Ctesports CT0001 Case da Gaming\",\n        \"price\": 63.66,\n        \"power\": 0,\n        \"componentFamily\": {\n            \"id\": 1,\n            \"name\": \"Case standard ATX\",\n            \"type\": {\n                \"id\": 1,\n                \"name\": \"CASE\",\n                \"sortOrder\": null\n            }\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get components according to their type failure due to a not existing type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/component/25",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"25"
							]
						},
						"description": "In this case the API will fail because the type id does not exist."
					},
					"response": [
						{
							"name": "Get components according to their type failure due to a not existing type id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/component/25",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"25"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:29:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Get a component according to its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.price).to.be.a(\"number\");",
									"    pm.expect(jsonData.power).to.be.a(\"number\");",
									"    pm.expect(jsonData.componentFamily).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/components/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"components",
								"2"
							]
						},
						"description": "This API will allow you to get a specific component according to its id."
					},
					"response": [
						{
							"name": "Get a component according to its id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/components/2",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"components",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:15:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"TALIUS Cronos Vetro Temperato\",\n    \"price\": 186.38,\n    \"power\": 0,\n    \"componentFamily\": {\n        \"id\": 1,\n        \"name\": \"Case standard ATX\",\n        \"type\": {\n            \"id\": 1,\n            \"name\": \"CASE\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.price).to.be.a(\"number\");",
									"    pm.expect(jsonData.power).to.be.a(\"number\");",
									"    pm.expect(jsonData.componentFamily).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Intel 7800K\",\n    \"price\": 250.55,\n    \"power\": 200,\n    \"familyId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/component",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component"
							]
						},
						"description": "This API will allow you to add a new component to the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Add a new component",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Intel 7800K\",\n    \"price\": 250.55,\n    \"power\": 200,\n    \"familyId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/component",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:16:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 125,\n    \"name\": \"Intel 7800K\",\n    \"price\": 250.55,\n    \"power\": 200,\n    \"componentFamily\": {\n        \"id\": 2,\n        \"name\": \"CPU Intel socket FCLGA1200\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new component failure due to a not existing family id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Intel 7800K\",\n    \"price\": 250.55,\n    \"power\": 200,\n    \"familyId\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/component",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component"
							]
						},
						"description": "In this case the API will fail because the existing family passed in the request body does not exist."
					},
					"response": [
						{
							"name": "Add a new component failure due to a not existing family id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Intel 7800K\",\n    \"price\": 250.55,\n    \"power\": 200,\n    \"familyId\": 30\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/component",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:30:55 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Modify a component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.price).to.be.a(\"number\");",
									"    pm.expect(jsonData.power).to.be.a(\"number\");",
									"    pm.expect(jsonData.componentFamily).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/component/107",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"107"
							]
						},
						"description": "This API will allow you to modify a component already memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Modify a component",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/component/125",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"125"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:16:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 125,\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"componentFamily\": {\n        \"id\": 3,\n        \"name\": \"CPU Intel socket FCLGA2066\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Modify a component  failure due to a not existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/component/250",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"250"
							]
						},
						"description": "In this case the API will fail because the component id does not exist."
					},
					"response": [
						{
							"name": "Modify a component  failure due to a not existing id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/component/250",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"250"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:31:22 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Modify a component  failure due to a not existing family id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/component/107",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"107"
							]
						},
						"description": "In this case the API will fail because the family id passed into the request body does not exist."
					},
					"response": [
						{
							"name": "Modify a component  failure due to a not existing family id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Intel 8000CE\",\n    \"price\": 440.55,\n    \"power\": 450,\n    \"familyId\": 50\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/component/107",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"107"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:31:40 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete a component",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/component/107",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"107"
							]
						},
						"description": "This API will allow you to delete a component memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete a component",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/component/125",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"125"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:17:28 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Delete a component failure due to a not existing component id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/component/150",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"component",
								"150"
							]
						},
						"description": "In this case the API will fail because the component id does not exist."
					},
					"response": [
						{
							"name": "Delete a component failure due to a not existing component id",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/component/118",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"component",
										"118"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:17:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "false"
						}
					]
				}
			],
			"description": "This folder contains all the APIs related with components."
		},
		{
			"name": "ComponentFamilyAPI",
			"item": [
				{
					"name": "Get all component families available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/componentFamilies",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamilies"
							]
						},
						"description": "This API will allow you to get all the component families memorized into the DB."
					},
					"response": [
						{
							"name": "Get all component families available",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/componentFamilies",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamilies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:17:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Case standard ATX\",\n        \"type\": {\n            \"id\": 1,\n            \"name\": \"CASE\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CPU Intel socket FCLGA1200\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 3,\n        \"name\": \"CPU Intel socket FCLGA2066\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 4,\n        \"name\": \"CPU AMD socket AM4\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 5,\n        \"name\": \"CPU AMD socket sTRX4\",\n        \"type\": {\n            \"id\": 2,\n            \"name\": \"CPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Motherboard B460\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Motherboard B560\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Motherboard Z490\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 9,\n        \"name\": \"Motherboard Z590\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Motherboard C422\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Motherboard X299\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Motherboard B450\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 13,\n        \"name\": \"Motherboard B550\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Motherboard X470\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 15,\n        \"name\": \"Motherboard X570\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Motherboard TRX40\",\n        \"type\": {\n            \"id\": 3,\n            \"name\": \"MOTHERBOARD\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 17,\n        \"name\": \"GPU Nvidia\",\n        \"type\": {\n            \"id\": 4,\n            \"name\": \"GPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 18,\n        \"name\": \"GPU RADEON\",\n        \"type\": {\n            \"id\": 4,\n            \"name\": \"GPU\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 19,\n        \"name\": \"RAM 128GB 4 slot\",\n        \"type\": {\n            \"id\": 5,\n            \"name\": \"RAM\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 20,\n        \"name\": \"RAM 256GB 8 slot\",\n        \"type\": {\n            \"id\": 5,\n            \"name\": \"RAM\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 21,\n        \"name\": \"Memory PCIe\",\n        \"type\": {\n            \"id\": 6,\n            \"name\": \"MEMORY\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 22,\n        \"name\": \"Memory SOLID STATE\",\n        \"type\": {\n            \"id\": 6,\n            \"name\": \"MEMORY\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 23,\n        \"name\": \"Memory HARD DISK\",\n        \"type\": {\n            \"id\": 6,\n            \"name\": \"MEMORY\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 24,\n        \"name\": \"CPU cooler\",\n        \"type\": {\n            \"id\": 7,\n            \"name\": \"CPU COOLER\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 25,\n        \"name\": \"Power supply\",\n        \"type\": {\n            \"id\": 8,\n            \"name\": \"POWER SUPPLY\",\n            \"sortOrder\": null\n        }\n    },\n    {\n        \"id\": 26,\n        \"name\": \"Accessories\",\n        \"type\": {\n            \"id\": 9,\n            \"name\": \"ACCESSORIES\",\n            \"sortOrder\": null\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get a component family according to its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/componentFamilies/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamilies",
								"2"
							]
						},
						"description": "This API will allow you to get a specific component family according to its id."
					},
					"response": [
						{
							"name": "Get a component family according to its id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/componentFamilies/2",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamilies",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:17:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"CPU Intel socket FCLGA1200\",\n    \"type\": {\n        \"id\": 2,\n        \"name\": \"CPU\",\n        \"sortOrder\": null\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new component family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Supply 500\",\n    \"typeId\": 8\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentFamily",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily"
							]
						},
						"description": "This API will allow you to add a new component family to the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Add a new component family",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tastiere\",\n    \"typeId\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentFamily",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:18:09 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 34,\n    \"name\": \"Tastiere\",\n    \"type\": {\n        \"id\": 9,\n        \"name\": \"ACCESSORIES\",\n        \"sortOrder\": null\n    }\n}"
						}
					]
				},
				{
					"name": "Add a new component family failure due to a not existing type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Tastiere\",\n    \"typeId\": 40\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentFamily",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily"
							]
						},
						"description": "In this case the API will fail because the type id passed in the request body does not exist."
					},
					"response": [
						{
							"name": "Add a new component family failure due to a not existing type id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tastiere\",\n    \"typeId\": 40\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentFamily",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:32:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Modify a component family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.type).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 4\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentFamily/26",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily",
								"26"
							]
						},
						"description": "This API will allow you to modify a component family already memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Modify a component family",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 4\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentFamily/34",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily",
										"34"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:18:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 34,\n    \"name\": \"mouse\",\n    \"type\": {\n        \"id\": 4,\n        \"name\": \"GPU\",\n        \"sortOrder\": null\n    }\n}"
						}
					]
				},
				{
					"name": "Modify a component family failure due to a not existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 5\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentFamily/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily",
								"50"
							]
						},
						"description": "In this case the API will fail because the component family id does not exist."
					},
					"response": [
						{
							"name": "Modify a component family failure due to a not existing id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 5\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentFamily/50",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily",
										"50"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:32:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Modify a component family failure due to a not existing type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 15\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentFamily/26",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily",
								"26"
							]
						},
						"description": "In this case the API will fail because the type id passed in the request body does not exist."
					},
					"response": [
						{
							"name": "Modify a component family failure due to a not existing type id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"mouse\",\n    \"typeId\": 15\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentFamily/26",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily",
										"26"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:33:00 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete a component family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/componentFamily/26",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily",
								"26"
							]
						},
						"description": "This API will allow you to delete a component family memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete a component family",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/componentFamily/34",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily",
										"34"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:19:04 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Delete a component family failure due to a not existing component family id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/componentFamily/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentFamily",
								"50"
							]
						},
						"description": "In this case the API will fail because the component family id does not exist."
					},
					"response": [
						{
							"name": "Delete a component family failure due to a not existing component family id",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/componentFamily/27",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentFamily",
										"27"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:19:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "false"
						}
					]
				}
			],
			"description": "This folder contains all the APIs related with component families."
		},
		{
			"name": "ComponentTypeAPI",
			"item": [
				{
					"name": "Get all component types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/componentTypes",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentTypes"
							]
						},
						"description": "This API will allow you to get all the component types memorized into the DB."
					},
					"response": [
						{
							"name": "Get all component types",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/componentTypes",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentTypes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:19:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"CASE\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CPU\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 3,\n        \"name\": \"MOTHERBOARD\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 4,\n        \"name\": \"GPU\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 5,\n        \"name\": \"RAM\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 6,\n        \"name\": \"MEMORY\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 7,\n        \"name\": \"CPU COOLER\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 8,\n        \"name\": \"POWER SUPPLY\",\n        \"sortOrder\": null\n    },\n    {\n        \"id\": 9,\n        \"name\": \"ACCESSORIES\",\n        \"sortOrder\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get a component type according to its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/componentTypes/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentTypes",
								"1"
							]
						},
						"description": "This API will allow you to get a specific component type according to its id."
					},
					"response": [
						{
							"name": "Get a component type according to its id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/componentTypes/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentTypes",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:19:25 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"CASE\",\n    \"sortOrder\": null\n}"
						}
					]
				},
				{
					"name": "Add a new component type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CASE\",\n    \"sortOrder\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentType",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentType"
							]
						},
						"description": "This API will allow you to add a new component type to the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Add a new component type",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"CASE\",\n    \"sortOrder\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentType",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentType"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:19:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 25,\n    \"name\": \"CASE\",\n    \"sortOrder\": 1\n}"
						}
					]
				},
				{
					"name": "Modify a component type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.sortOrder).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CASE ATX\",\n    \"sortOrder\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentType/9",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentType",
								"9"
							]
						},
						"description": "This API will allow you to modify a component type already memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Modify a component type",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"CASE ATX\",\n    \"sortOrder\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentType/25",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentType",
										"25"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:20:03 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 25,\n    \"name\": \"CASE ATX\",\n    \"sortOrder\": 2\n}"
						}
					]
				},
				{
					"name": "Modify a component type failure due to a not existing component type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CASE ATX\",\n    \"sortOrder\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/componentType/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentType",
								"50"
							]
						},
						"description": "In this case the API will fail because the component type id does not exist."
					},
					"response": [
						{
							"name": "Modify a component type failure due to a not existing component type id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"CASE ATX\",\n    \"sortOrder\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/componentType/50",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentType",
										"50"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:33:20 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete a component type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/componentType/9",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentType",
								"9"
							]
						},
						"description": "This API will allow you to delete a component type memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete a component type",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/componentType/25",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentType",
										"25"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:20:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Delete a component type failure due to a not existing component type id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/componentType/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"componentType",
								"50"
							]
						},
						"description": "In this case the API will fail because the component type id does not exist."
					},
					"response": [
						{
							"name": "Delete a component type failure due to a not existing component type id",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/componentType/50",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"componentType",
										"50"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:20:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "false"
						}
					]
				},
				{
					"name": "Delete all component types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/deleteAll",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"deleteAll"
							]
						},
						"description": "This API will allow you to delete all the component types memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete all component types",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/deleteAll",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"deleteAll"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:23:41 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				}
			],
			"description": "This folder contains all the APIs related with component types."
		},
		{
			"name": "CredentialAPI",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.expect(jsonData.credential).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.undefined;",
									"    pm.expect(jsonData.password).to.be.undefined;",
									"    pm.expect(jsonData.expired).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						},
						"description": "This API will allow you to get an identification token in order to realize all the admin's operations. In the request password you have to insert username and password."
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"admin\",\n    \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:11:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 24,\n    \"token\": \"534c300a-6e3d-4966-9b5e-998b1d9fadc0\",\n    \"credential\": {\n        \"id\": 1,\n        \"name\": \"admin\",\n        \"password\": \"admin\"\n    },\n    \"expireDate\": \"2021-06-30T19:41:53.226+00:00\",\n    \"expired\": false\n}"
						}
					]
				},
				{
					"name": "Login failure due to wrong username or password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"H21\",\n    \"password\": \"computer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"login"
							]
						},
						"description": "In this case the API will fail because username or password are wrong."
					},
					"response": [
						{
							"name": "Login failure due to wrong username or password",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"H21\",\n    \"password\": \"computer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"login"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:12:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/logout",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logout"
							]
						},
						"description": "This API will allow you to complete the logout operation.\nIdentification token required."
					},
					"response": [
						{
							"name": "Logout",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/logout",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:24:26 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Logout failure due to wrong token or because using a token already expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 401\", () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "cf5f0894-9d67-4f8f-876e-9d14fd0aa14f",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/logout",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logout"
							]
						},
						"description": "In this case the API will fail because the token has already expired or it is not correct."
					},
					"response": [
						{
							"name": "Logout failure due to wrong token or because using a token already expired",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "cf5f0894-9d67-4f8f-876e-9d14fd0aa14f",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/logout",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"logout"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:24:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "This folder contains all the APIs related with credentials."
		},
		{
			"name": "ReadySetupAPI",
			"item": [
				{
					"name": "Get all ready setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/readySetups",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetups"
							]
						},
						"description": "This API will allow you to get all the ready setup memorized into the DB."
					},
					"response": [
						{
							"name": "Get all ready setup",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/readySetups",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:21:59 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Pc Atlas72\",\n        \"componentList\": [\n            {\n                \"id\": 15,\n                \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n                \"price\": 797,\n                \"power\": 165,\n                \"componentFamily\": {\n                    \"id\": 3,\n                    \"name\": \"CPU Intel socket FCLGA2066\",\n                    \"type\": {\n                        \"id\": 2,\n                        \"name\": \"CPU\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 2,\n                \"name\": \"TALIUS Cronos Vetro Temperato\",\n                \"price\": 186.38,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 1,\n                    \"name\": \"Case standard ATX\",\n                    \"type\": {\n                        \"id\": 1,\n                        \"name\": \"CASE\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 75,\n                \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n                \"price\": 1664.99,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 20,\n                    \"name\": \"RAM 256GB 8 slot\",\n                    \"type\": {\n                        \"id\": 5,\n                        \"name\": \"RAM\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 78,\n                \"name\": \"Intel 670p M.2 2 TB\",\n                \"price\": 246.99,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 21,\n                    \"name\": \"Memory PCIe\",\n                    \"type\": {\n                        \"id\": 6,\n                        \"name\": \"MEMORY\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 105,\n                \"name\": \"CORSAIR 850 W TXm SERIES\",\n                \"price\": 129,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 25,\n                    \"name\": \"Power supply\",\n                    \"type\": {\n                        \"id\": 8,\n                        \"name\": \"POWER SUPPLY\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 36,\n                \"name\": \"ASUS WS C422 PRO/SE \",\n                \"price\": 493.42,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 10,\n                    \"name\": \"Motherboard C422\",\n                    \"type\": {\n                        \"id\": 3,\n                        \"name\": \"MOTHERBOARD\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 99,\n                \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n                \"price\": 156,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 24,\n                    \"name\": \"CPU cooler\",\n                    \"type\": {\n                        \"id\": 7,\n                        \"name\": \"CPU COOLER\",\n                        \"sortOrder\": null\n                    }\n                }\n            }\n        ],\n        \"imagePath\": \"www.H21project.it/super72\",\n        \"totalPrice\": 2999.99,\n        \"usage\": \"Workstation\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Pc AZdelta5\",\n        \"componentList\": [\n            {\n                \"id\": 15,\n                \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n                \"price\": 797,\n                \"power\": 165,\n                \"componentFamily\": {\n                    \"id\": 3,\n                    \"name\": \"CPU Intel socket FCLGA2066\",\n                    \"type\": {\n                        \"id\": 2,\n                        \"name\": \"CPU\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 2,\n                \"name\": \"TALIUS Cronos Vetro Temperato\",\n                \"price\": 186.38,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 1,\n                    \"name\": \"Case standard ATX\",\n                    \"type\": {\n                        \"id\": 1,\n                        \"name\": \"CASE\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 75,\n                \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n                \"price\": 1664.99,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 20,\n                    \"name\": \"RAM 256GB 8 slot\",\n                    \"type\": {\n                        \"id\": 5,\n                        \"name\": \"RAM\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 78,\n                \"name\": \"Intel 670p M.2 2 TB\",\n                \"price\": 246.99,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 21,\n                    \"name\": \"Memory PCIe\",\n                    \"type\": {\n                        \"id\": 6,\n                        \"name\": \"MEMORY\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 36,\n                \"name\": \"ASUS WS C422 PRO/SE \",\n                \"price\": 493.42,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 10,\n                    \"name\": \"Motherboard C422\",\n                    \"type\": {\n                        \"id\": 3,\n                        \"name\": \"MOTHERBOARD\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 99,\n                \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n                \"price\": 156,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 24,\n                    \"name\": \"CPU cooler\",\n                    \"type\": {\n                        \"id\": 7,\n                        \"name\": \"CPU COOLER\",\n                        \"sortOrder\": null\n                    }\n                }\n            },\n            {\n                \"id\": 104,\n                \"name\": \"CORSAIR 750 W CXM SERIES\",\n                \"price\": 101.99,\n                \"power\": 0,\n                \"componentFamily\": {\n                    \"id\": 25,\n                    \"name\": \"Power supply\",\n                    \"type\": {\n                        \"id\": 8,\n                        \"name\": \"POWER SUPPLY\",\n                        \"sortOrder\": null\n                    }\n                }\n            }\n        ],\n        \"imagePath\": \"www.H21project.it/super\",\n        \"totalPrice\": 2234.55,\n        \"usage\": \"Gaming\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get a ready setup according to its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.componentList).to.be.a(\"array\");",
									"    pm.expect(jsonData.imagePath).to.be.a(\"string\");",
									"    pm.expect(jsonData.totalPrice).to.be.a(\"number\");",
									"    pm.expect(jsonData.usage).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/readySetups/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetups",
								"1"
							]
						},
						"description": "This API will allow you to get a specific ready setup according to its id."
					},
					"response": [
						{
							"name": "Get a ready setup according to its id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/readySetups/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetups",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:21:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Pc Atlas72\",\n    \"componentList\": [\n        {\n            \"id\": 78,\n            \"name\": \"Intel 670p M.2 2 TB\",\n            \"price\": 246.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 21,\n                \"name\": \"Memory PCIe\",\n                \"type\": {\n                    \"id\": 6,\n                    \"name\": \"MEMORY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 99,\n            \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n            \"price\": 156,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 24,\n                \"name\": \"CPU cooler\",\n                \"type\": {\n                    \"id\": 7,\n                    \"name\": \"CPU COOLER\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 2,\n            \"name\": \"TALIUS Cronos Vetro Temperato\",\n            \"price\": 186.38,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 1,\n                \"name\": \"Case standard ATX\",\n                \"type\": {\n                    \"id\": 1,\n                    \"name\": \"CASE\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 75,\n            \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n            \"price\": 1664.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 20,\n                \"name\": \"RAM 256GB 8 slot\",\n                \"type\": {\n                    \"id\": 5,\n                    \"name\": \"RAM\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 36,\n            \"name\": \"ASUS WS C422 PRO/SE \",\n            \"price\": 493.42,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 10,\n                \"name\": \"Motherboard C422\",\n                \"type\": {\n                    \"id\": 3,\n                    \"name\": \"MOTHERBOARD\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 105,\n            \"name\": \"CORSAIR 850 W TXm SERIES\",\n            \"price\": 129,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 25,\n                \"name\": \"Power supply\",\n                \"type\": {\n                    \"id\": 8,\n                    \"name\": \"POWER SUPPLY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 15,\n            \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n            \"price\": 797,\n            \"power\": 165,\n            \"componentFamily\": {\n                \"id\": 3,\n                \"name\": \"CPU Intel socket FCLGA2066\",\n                \"type\": {\n                    \"id\": 2,\n                    \"name\": \"CPU\",\n                    \"sortOrder\": null\n                }\n            }\n        }\n    ],\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"totalPrice\": 2999.99,\n    \"usage\": \"Workstation\"\n}"
						}
					]
				},
				{
					"name": "Add a new ready setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.componentList).to.be.a(\"array\");",
									"    pm.expect(jsonData.imagePath).to.be.a(\"string\");",
									"    pm.expect(jsonData.totalPrice).to.be.a(\"number\");",
									"    pm.expect(jsonData.usage).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"imagePath\": \"www.H21project.it/super\",\n    \"name\": \"Pc AZdelta5\",\n    \"totalPrice\": 2234.55,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 104],\n    \"usage\": \"Gaming\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/readySetup",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetup"
							]
						},
						"description": "This API will allow you to add a new ready setup to the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Add a new ready setup",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"imagePath\": \"www.H21project.it/super\",\n    \"name\": \"Pc AZdelta5\",\n    \"totalPrice\": 2234.55,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 104],\n    \"usage\": \"Gaming\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/readySetup",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:21:52 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"name\": \"Pc AZdelta5\",\n    \"componentList\": [\n        {\n            \"id\": 78,\n            \"name\": \"Intel 670p M.2 2 TB\",\n            \"price\": 246.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 21,\n                \"name\": \"Memory PCIe\",\n                \"type\": {\n                    \"id\": 6,\n                    \"name\": \"MEMORY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 15,\n            \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n            \"price\": 797,\n            \"power\": 165,\n            \"componentFamily\": {\n                \"id\": 3,\n                \"name\": \"CPU Intel socket FCLGA2066\",\n                \"type\": {\n                    \"id\": 2,\n                    \"name\": \"CPU\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 99,\n            \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n            \"price\": 156,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 24,\n                \"name\": \"CPU cooler\",\n                \"type\": {\n                    \"id\": 7,\n                    \"name\": \"CPU COOLER\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 36,\n            \"name\": \"ASUS WS C422 PRO/SE \",\n            \"price\": 493.42,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 10,\n                \"name\": \"Motherboard C422\",\n                \"type\": {\n                    \"id\": 3,\n                    \"name\": \"MOTHERBOARD\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 75,\n            \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n            \"price\": 1664.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 20,\n                \"name\": \"RAM 256GB 8 slot\",\n                \"type\": {\n                    \"id\": 5,\n                    \"name\": \"RAM\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 104,\n            \"name\": \"CORSAIR 750 W CXM SERIES\",\n            \"price\": 101.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 25,\n                \"name\": \"Power supply\",\n                \"type\": {\n                    \"id\": 8,\n                    \"name\": \"POWER SUPPLY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 2,\n            \"name\": \"TALIUS Cronos Vetro Temperato\",\n            \"price\": 186.38,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 1,\n                \"name\": \"Case standard ATX\",\n                \"type\": {\n                    \"id\": 1,\n                    \"name\": \"CASE\",\n                    \"sortOrder\": null\n                }\n            }\n        }\n    ],\n    \"imagePath\": \"www.H21project.it/super\",\n    \"totalPrice\": 2234.55,\n    \"usage\": \"Gaming\"\n}"
						}
					]
				},
				{
					"name": "Modify a ready setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.name).to.be.a(\"string\");",
									"    pm.expect(jsonData.componentList).to.be.a(\"array\");",
									"    pm.expect(jsonData.imagePath).to.be.a(\"string\");",
									"    pm.expect(jsonData.totalPrice).to.be.a(\"number\");",
									"    pm.expect(jsonData.usage).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"name\": \"Pc Atlas72\",\n    \"totalPrice\": 2999.99,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 105],\n    \"usage\": \"Workstation\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/readySetup/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetup",
								"1"
							]
						},
						"description": "This API will allow you to modify a ready setup already memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Modify a ready setup",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"name\": \"Pc Atlas72\",\n    \"totalPrice\": 2999.99,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 105],\n    \"usage\": \"Workstation\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/readySetup/8",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetup",
										"8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:22:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"name\": \"Pc Atlas72\",\n    \"componentList\": [\n        {\n            \"id\": 78,\n            \"name\": \"Intel 670p M.2 2 TB\",\n            \"price\": 246.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 21,\n                \"name\": \"Memory PCIe\",\n                \"type\": {\n                    \"id\": 6,\n                    \"name\": \"MEMORY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 15,\n            \"name\": \"Intel Core i9-10940X serie X (19,25 MB di cache, 3,3 GHz)\",\n            \"price\": 797,\n            \"power\": 165,\n            \"componentFamily\": {\n                \"id\": 3,\n                \"name\": \"CPU Intel socket FCLGA2066\",\n                \"type\": {\n                    \"id\": 2,\n                    \"name\": \"CPU\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 105,\n            \"name\": \"CORSAIR 850 W TXm SERIES\",\n            \"price\": 129,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 25,\n                \"name\": \"Power supply\",\n                \"type\": {\n                    \"id\": 8,\n                    \"name\": \"POWER SUPPLY\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 99,\n            \"name\": \"Dissipatore PSU Corsair H150i ELITE CAPELLIX RG\",\n            \"price\": 156,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 24,\n                \"name\": \"CPU cooler\",\n                \"type\": {\n                    \"id\": 7,\n                    \"name\": \"CPU COOLER\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 36,\n            \"name\": \"ASUS WS C422 PRO/SE \",\n            \"price\": 493.42,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 10,\n                \"name\": \"Motherboard C422\",\n                \"type\": {\n                    \"id\": 3,\n                    \"name\": \"MOTHERBOARD\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 2,\n            \"name\": \"TALIUS Cronos Vetro Temperato\",\n            \"price\": 186.38,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 1,\n                \"name\": \"Case standard ATX\",\n                \"type\": {\n                    \"id\": 1,\n                    \"name\": \"CASE\",\n                    \"sortOrder\": null\n                }\n            }\n        },\n        {\n            \"id\": 75,\n            \"name\": \"Corsair VENGEANCE 3200 MHz 256 GB (8 da 32)\",\n            \"price\": 1664.99,\n            \"power\": 0,\n            \"componentFamily\": {\n                \"id\": 20,\n                \"name\": \"RAM 256GB 8 slot\",\n                \"type\": {\n                    \"id\": 5,\n                    \"name\": \"RAM\",\n                    \"sortOrder\": null\n                }\n            }\n        }\n    ],\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"totalPrice\": 2999.99,\n    \"usage\": \"Workstation\"\n}"
						}
					]
				},
				{
					"name": "Modify a ready setup failure due to a not existing ready setup id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"name\": \"Pc Atlas72\",\n    \"totalPrice\": 2999.99,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 105],\n    \"usage\": \"Workstation\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/readySetup/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetup",
								"50"
							]
						},
						"description": "In this case the API will fail because the ready setup id does not exist."
					},
					"response": [
						{
							"name": "Modify a ready setup failure due to a not existing ready setup id",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"imagePath\": \"www.H21project.it/super72\",\n    \"name\": \"Pc Atlas72\",\n    \"totalPrice\": 2999.99,\n    \"componentList\": [2, 15, 36, 75, 78, 99, 105],\n    \"usage\": \"Workstation\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/readySetup/50",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetup",
										"50"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Jul 2021 20:33:57 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete a ready setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/readySetup/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetup",
								"1"
							]
						},
						"description": "This API will allow you to delete a ready setup memorized into the DB.\nIdentification token required."
					},
					"response": [
						{
							"name": "Delete a ready setup",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/readySetup/8",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetup",
										"8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:23:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Delete a ready setup failure due to a not existing ready setup id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify Http response in Json\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.a(\"boolean\");",
									"    pm.expect(jsonData).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/readySetup/50",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"readySetup",
								"50"
							]
						},
						"description": "In this case the API will fail because the ready setup id does not exist."
					},
					"response": [
						{
							"name": "Delete a ready setup failure due to a not existing ready setup id",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/readySetup/50",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"readySetup",
										"50"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Jun 2021 19:23:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "false"
						}
					]
				}
			],
			"description": "This folder contains all the APIs related with ready setup."
		}
	]
}